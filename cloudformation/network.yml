AWSTemplateFormatVersion: "2010-09-09"
Description: Lecture13 Network Resources

Parameters:
  EnvironmentName:
    Type: String
    Description: The environment name (e.g., Dev, Test, Prod)
    Default: Lec13

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub VPC-${EnvironmentName}

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub IGW-${EnvironmentName}

  MyAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub Public-Route-Table-${EnvironmentName}

  MyPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway


  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Pub-subnet-1-${EnvironmentName}

  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub Pvt-subnet-1-${EnvironmentName}

  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Pub-subnet-2-${EnvironmentName}

  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub Pvt-subnet-2-${EnvironmentName}

  MyPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyPublicRouteTable

  MyPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyPublicRouteTable

  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: MyDB subnetGroup
      SubnetIds:
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2

  MyEC2SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP access to EC2
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref MyAlbSecGroup
      Tags:
        - Key: Name
          Value: !Sub EC2-SG-${EnvironmentName}

  MyRdsSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL to RDS from EC2
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref MyEC2SecGroup
      Tags:
        - Key: Name
          Value: !Sub RDS-EC2-SG-${EnvironmentName}

  MyAlbSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and access to ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ALB-SG-${EnvironmentName}

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref MyVPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCId

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref MyPublicSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet1Id

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref MyPublicSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PublicSubnet2Id

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref MyPrivateSubnet1
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet1Id

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref MyPrivateSubnet2
    Export:
      Name: !Sub ${EnvironmentName}-PrivateSubnet2Id

  MyDBSubnetGroupId:
    Description: DB Subnet Group ID
    Value: !Ref MyDBSubnetGroup
    Export:
      Name: !Sub ${EnvironmentName}-MyDBSubnetGroupId

  MyEC2SecGroupId:
    Description: EC2 Security Group ID
    Value: !Ref MyEC2SecGroup
    Export:
      Name: !Sub ${EnvironmentName}-MyEC2SecGroupId

  MyRdsSecGroupId:
    Description: RDS Security Group ID
    Value: !Ref MyRdsSecGroup
    Export:
      Name: !Sub ${EnvironmentName}-MyRdsSecGroupId

  MyAlbSecGroupId:
    Description: ALB Security Group ID
    Value: !Ref MyAlbSecGroup
    Export:
      Name: !Sub ${EnvironmentName}-MyAlbSecGroupId

