AWSTemplateFormatVersion: "2010-09-09"
Description: Lecture10 Assignment

Parameters:
  DBPassword:
    Type: String
    Description: The database admin password
    NoEcho: true
  EnvironmentName:
    Type: String
    Description: The environment name (e.g., Dev, Test, Prod)
    Default: Lec10
    
Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub VPC-${EnvironmentName}

  # インターネットゲートウェイ
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub IGW-${EnvironmentName}


  # IGWをVPCにアタッチ
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # パブリックサブネット1
  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-northeast-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Pub-subnet-1-${EnvironmentName}

  # プライベートサブネット1
  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-northeast-1a
      Tags:
        - Key: Name
          Value: !Sub Pvt-subnet-1-${EnvironmentName}

  # パブリックサブネット2
  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-northeast-1c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Pub-subnet-2-${EnvironmentName}

  # プライベートサブネット2
  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ap-northeast-1c
      Tags:
        - Key: Name
          Value: !Sub Pvt-subnet-2-${EnvironmentName}

  # RDS用のカスタムサブネットグループ
  MyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: MyDB subnetGroup
      SubnetIds:
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2

  # EC2用のセキュリティグループ
  MyEC2SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP access to EC2
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 126.51.136.123/32
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub EC2-SG-${EnvironmentName}

  # RDS用のセキュリティグループ
  MyRdsSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL to RDS from EC2
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref MyEC2SecGroup
      Tags:
        - Key: Name
          Value: !Sub RDS-EC2-SG-${EnvironmentName}

  # ALB用のセキュリティグループ
  MyAlbSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and access to ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ALB-SG-${EnvironmentName}


  # パブリックサブネット1 のルートテーブル作成
  MyPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub RouteTable-PubSubnet1-${EnvironmentName}

  # パブリックルートテ-ブルの設定
  MyPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref MyPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # パブリックルートテーブルをパブリックサブネット1に紐付ける
  PublicRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyPublicRouteTable

 # パブリックルートテーブルをパブリックサブネット2に紐付ける
  PublicRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyPublicRouteTable

  # プライベートサブネット１のルートテーブル作成
  MyPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub RouteTable-PvtSubnet1-${EnvironmentName}

  # プライベートルートテーブルをプライベートサブネット1に紐づける
  PrivateRouteTableAssocation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet1
      RouteTableId: !Ref MyPrivateRouteTable1

  # プライベートルートテーブルをプライベートサブネット2に紐づける
  PrivateRouteTableAssocation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet2
      RouteTableId: !Ref MyPrivateRouteTable1

  # ALB
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref MyAlbSecGroup
      Subnets: 
        - !Ref MyPublicSubnet1
        - !Ref MyPublicSubnet2
      Type: application
      Name: !Sub ALB-${EnvironmentName}

  # ALBのターゲットグループ
  MytargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyVPC
      Name: !Sub TargetGroup-${EnvironmentName}

  # ALB リスナー設定
  MyALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref MytargetGroup
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP

  #キーペア作成
  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: MyKeyPair


  #EC2インスタンス
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref MyKeyPair
      ImageId: ami-0df2ca8a354185e1e
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref MyEC2SecGroup
      SubnetId: !Ref MyPublicSubnet1
      IamInstanceProfile: !Ref MyInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub EC2-${EnvironmentName}

  #mySQLのRDB作成
  MyRdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      AvailabilityZone: ap-northeast-1a
      DBName: mydatabase
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUsername: raisetech_admin
      MasterUserPassword: !Ref DBPassword
      Port: 3306 
      PubliclyAccessible: false
      StorageType: gp2
      DBSubnetGroupName: !Ref MyDBSubnetGroup
      VPCSecurityGroups:
        - !Ref MyRdsSecGroup

  Mys3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: mybucket-raisetech-lec10

  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${EnvironmentName}
      Roles:
        - !Ref MyRole

  MyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub EC2S3FullAccessToRaisetech${EnvironmentName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: !GetAtt Mys3Bucket.Arn
